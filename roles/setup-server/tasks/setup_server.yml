---

- name: Set server hostname to the Server URL
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  ansible.builtin.command: |
    hostnamectl set-hostname {{ server_url }}

- name: Get current machine-id
  delegate_to: "{{ server_ipv4_final }}"
  command: cat /etc/machine-id
  register: current_machine_id
  changed_when: false  # This ensures that Ansible doesn't report this task as having made changes

- name: Generate a new machine-id if it matches the template's machine-id
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  shell: echo $(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 32 | head -n 1) > /etc/machine-id
  when: current_machine_id.stdout == proxmox_template_machine_id

- name: Install systemd-resolved on Debian 11/12 hosts
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  apt:
    pkg:
     - systemd-resolved
  register: apt_status
  when: ( ansible_facts['distribution_release'] == 'bullseye' ) or ( ansible_facts['distribution_release'] == 'bookworm' )
  until: apt_status is success
  delay: 6
  retries: 10

- name: Configure DNS, set primary nameserver if defined (using /etc/resolved.conf)
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  ansible.builtin.replace:
    path: /etc/systemd/resolved.conf
    regexp: '^#?DNS=.*$'
    replace: 'DNS={{ nameserver_primary | default("1.1.1.1") }}'
    backup: yes
  when: ( ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy' or ansible_facts['distribution_release'] == 'bullseye' or ansible_facts['distribution_release'] == 'bookworm' ) and ( nameserver_primary is defined )

- name: Configure DNS, set fallback nameserver if defined (using /etc/resolved.conf)
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  ansible.builtin.replace:
    path: /etc/systemd/resolved.conf
    regexp: '^#?FallbackDNS=.*$'
    replace: 'FallbackDNS={{ nameserver_fallback | default("1.0.0.1") }}'
    backup: yes
  when: ( ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy' or ansible_facts['distribution_release'] == 'bullseye' or ansible_facts['distribution_release'] == 'bookworm' ) and ( nameserver_fallback is defined )

- name: Configure DNS, restart the systemd-resolved service
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  ansible.builtin.systemd:
    state: restarted
    name: systemd-resolved.service
  when: ( ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy' or ansible_facts['distribution_release'] == 'bullseye' or ansible_facts['distribution_release'] == 'bookworm' )
  ignore_errors: true

- name: Update repositories
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  apt:
    update_cache: yes
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Upgrade all packages on target machine
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  apt:
    name: "*"
    state: latest
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Pause for 10 seconds to let APT breathe
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  ansible.builtin.pause:
    seconds: 10

- name: Install necessary packages on target machine
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  apt:
    pkg:
     - git
     - gpg
     - openssl
     - unattended-upgrades
     - apt-listchanges
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Configure unattended-upgrades on Debian 11 and 12 (1/3)
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^\/\/      "origin=Debian,codename=\$\{distro_codename}-updates\";$'
    line: '        "origin=Debian,codename=${distro_codename}-updates";'
    owner: root
    group: root
    mode: '0644'
  when: ( ansible_facts['distribution_release'] == 'bullseye' ) or ( ansible_facts['distribution_release'] == 'bookworm' )

- name: Configure unattended-upgrades on Debian 11 and 12 (2/3)
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^\/\/      "origin=Debian,codename=\$\{distro_codename}-proposed-updates\";$'
    line: '        "origin=Debian,codename=${distro_codename}-proposed-updates";'
    owner: root
    group: root
    mode: '0644'
  when: ( ansible_facts['distribution_release'] == 'bullseye' ) or ( ansible_facts['distribution_release'] == 'bookworm' )

- name: Configure unattended-upgrades on Debian 11 and 12 (3/3)
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^\/\/      "o=Debian Backports,a=\$\{distro_codename}-backports,l=Debian Backports";$'
    line: '        "o=Debian Backports,a=${distro_codename}-backports,l=Debian Backports";'
    owner: root
    group: root
    mode: '0644'
  when: ( ansible_facts['distribution_release'] == 'bullseye' ) or ( ansible_facts['distribution_release'] == 'bookworm' )

- name: Configure unattended-upgrades on Ubuntu 20.04 and 22.04
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  copy:
    content: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Unattended-Upgrade "1";
    dest: /etc/apt/apt.conf.d/20auto-upgrades
  when: ( ansible_facts['distribution_release'] == 'focal' ) or ( ansible_facts['distribution_release'] == 'jammy' )

- name: Enable unattended-upgrades on Ubuntu 20.04 and 22.04
  delegate_to: "{{ server_ipv4_final }}"
  become: true
  template:
    src: ./roles/setup-server/templates/50-unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
  when: ( ansible_facts['distribution_release'] == 'focal' ) or ( ansible_facts['distribution_release'] == 'jammy' )
