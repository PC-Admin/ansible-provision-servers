---

- name: Collect name of netplan config file
  delegate_to: "{{ server_ipv4 }}"
  become: true
  ansible.builtin.shell: |
    echo $(ls /etc/netplan/)
  register: netplan_config_file
  when: ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy'

- name: Backup current netplan configuration (Ubuntu)
  delegate_to: "{{ server_ipv4 }}"
  become: true
  ansible.builtin.copy:
    src: /etc/netplan/{{ netplan_config_file.stdout }}
    dest: "/etc/netplan/{{ netplan_config_file.stdout }}.bak.{{ ansible_date_time.iso8601_micro }}"
    remote_src: true
  when: ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy'
  ignore_errors: true

- name: Set static IP (Ubuntu)
  delegate_to: "{{ server_ipv4 }}"
  become: true
  ansible.builtin.template:
    src: "{{ role_path }}/templates/static_netplan.j2"
    dest: /etc/netplan/{{ netplan_config_file.stdout }}
  when: ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy'

- name: Apply netplan configuration (Ubuntu)
  delegate_to: "{{ server_ipv4 }}"
  become: true
  ansible.builtin.shell: | # The sleep here is needed so that ansible can exit the SSH session before the change occurs
      nohup bash -c "sleep 1 && netplan apply" &
  when: ansible_facts['distribution_release'] == 'focal' or ansible_facts['distribution_release'] == 'jammy'

- name: Set static IP (Debian) 1/2
  delegate_to: "{{ server_ipv4 }}"
  become: true
  lineinfile:
    path: /etc/network/interfaces
    regexp: '^iface {{ ansible_default_ipv4.interface }} inet dhcp'
    line: '#iface {{ ansible_default_ipv4.interface }} inet dhcp'
  when: ansible_facts['distribution_release'] == 'bullseye' or ansible_facts['distribution_release'] == 'bookworm'

- name: Set static IP (Debian) 2/2
  delegate_to: "{{ server_ipv4 }}"
  become: true
  blockinfile:
    path: /etc/network/interfaces
    insertafter: '^#iface {{ ansible_default_ipv4.interface }} inet dhcp'
    block: |
      iface {{ ansible_default_ipv4.interface }} inet static
        address {{ static_ipv4_with_mask.split('/')[0] }}
        netmask {{ ansible_default_ipv4.netmask }}
        gateway {{ ansible_default_ipv4.gateway }}
  when: ansible_facts['distribution_release'] == 'bullseye' or ansible_facts['distribution_release'] == 'bookworm'

- name: Apply the new networking configuration (Debian)
  delegate_to: "{{ server_ipv4 }}"
  become: true
  ansible.builtin.shell: |
    nohup bash -c 'sleep 5 && systemctl restart networking' &
  async: 10
  poll: 0
  when: ansible_facts['distribution_release'] == 'bullseye' or ansible_facts['distribution_release'] == 'bookworm'
