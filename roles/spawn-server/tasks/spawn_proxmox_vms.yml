---

- name: "Create a full clone of the template for each host (sequentially)"
  delegate_to: localhost
  community.general.proxmox_kvm:
    api_host: "{{ hostvars[item].proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_token_id: "{{ proxmox_token_id }}"
    api_token_secret: "{{ proxmox_token_secret }}"
    name: "{{ hostvars[item].inventory_hostname }}"
    node: "{{ hostvars[item].proxmox_node }}"
    clone: "{{ hostvars[item].proxmox_template }}"
    storage: "{{ hostvars[item].proxmox_storage }}"
    full: true
    state: present
    timeout: 300
  register: new_clone_info
  when: hostvars[item].spawn_on_proxmox | bool
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    pause: 1
  run_once: true

# - name: "Print each entry from new_clone_info.results"
#   debug:
#     msg: "{{ item }}"
#   with_items: "{{ new_clone_info.results }}"
#   when: new_clone_info is defined
#   run_once: true

- name: Assign VMID as a fact for each host
  set_fact:
    vmid: "{{ item.vmid }}"
  when:
    - item.vmid is defined
    - inventory_hostname == item.item
  loop: "{{ new_clone_info.results }}"

- name: Set VM cores/memory/balloon/shares via the Proxmox API
  delegate_to: localhost
  uri:
    url: "https://{{ hostvars[item].proxmox_host }}:8006/api2/json/nodes/{{ hostvars[item].proxmox_node }}/qemu/{{ hostvars[item].vmid }}/config"
    method: POST
    headers:
      Authorization: "PVEAPIToken={{ proxmox_user }}!{{ proxmox_token_id }}={{ proxmox_token_secret }}"
    body_format: form-urlencoded
    body:
      cores: "{{ hostvars[item].proxmox_kvm_cores | default(omit) }}"
      memory: "{{ hostvars[item].proxmox_kvm_memory | default(omit) }}"
      balloon: "{{ hostvars[item].proxmox_kvm_balloon | default(omit) }}"
      shares: "{{ hostvars[item].proxmox_kvm_shares | default(omit) }}"
    validate_certs: no  # set this to yes in a production environment if you have valid SSL certs
  register: api_response
  when: ( hostvars[item].proxmox_kvm_cores is defined ) and ( hostvars[item].spawn_on_proxmox | bool )
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    pause: 1
  run_once: true

# This will print the API response for debugging purposes
# - debug:
#     msg: "api_response: {{ api_response }}"

- name: Sleep 10 seconds
  pause:
    seconds: 10
  run_once: true

- name: Start the new Proxmox VMs (sequentially)
  delegate_to: localhost
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_token_id: "{{ proxmox_token_id }}"
    api_token_secret: "{{ proxmox_token_secret }}"
    vmid: "{{ item.vmid }}"
    node: "{{ proxmox_node }}"
    state: started
  register: new_server_info_started
  with_items: "{{ new_clone_info.results }}"
  when: item.vmid is defined
  run_once: true

- name: Print stdout of new_server_info_started.results
  debug:
    msg: "new_server_info_started: {{ item }}"
  with_items: "{{ new_server_info_started.results }}"
  run_once: true

- name: Print stdout of new_server_info_started.results
  debug:
    msg: "VMID: {{ item.vmid }}, Node: {{ item.item.invocation.module_args.node }}, Status: {{ item.status }}"
  when:
    - item.vmid is defined
    - item.item.invocation.module_args.node is defined
    - item.status is defined
  with_items: "{{ new_server_info_started.results }}"
  run_once: true

- name: Set string fact for checking is QEMU is running yet
  set_fact:
    qemu_unloaded_status: "QEMU guest agent is not running"
  when: spawn_on_proxmox | bool

- name: Probe proxmox host for VMs network details for up to 180 seconds
  delegate_to: "{{ item.item.invocation.module_args.node }}"
  command: |
      sudo qm guest cmd {{ item.vmid }} network-get-interfaces
  when: item.vmid is defined
  with_items: "{{ new_server_info_started.results }}"
  until: qemu_guest_info.stderr != qemu_unloaded_status
  loop_control:
    pause: 10
  register: qemu_guest_info
  run_once: true
  ignore_errors: true

- name: Print all IPv4 and IPv6 IP addresses with the respective hostname
  debug:
    msg:
      - "hostname: {{ item.0 }}"
      - "server_ipv4: {{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') }}"
      - "server_ipv6: {{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][1] | [1]') | json_query('[\"ip-address\"][0]') }}"
  when:
    - hostvars[item.0].spawn_on_proxmox | bool
    - item.1.stdout != ''
    - (item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') | length > 0)
  loop: "{{ ansible_play_hosts | zip(qemu_guest_info.results) | list }}"
  run_once: true

- name: For each host, define a server_ipv4 and server_ipv6 variable
  set_fact:
    server_ipv4: "{{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') }}"
    server_ipv6: "{{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][1] | [1]') | json_query('[\"ip-address\"][0]') }}"
  when:
    - hostvars[item.0].spawn_on_proxmox | bool
    - item.1.stdout != ''
    - item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') | length > 0
    - inventory_hostname == item.0
  loop: "{{ ansible_play_hosts | zip(qemu_guest_info.results) | list }}"

- name: "Debug server_ipv4"
  debug:
    msg: "IPv4 for {{ inventory_hostname }} is {{ server_ipv4 }}"
  when: spawn_on_proxmox | bool

# This tends to happen on the first run with Debian hosts and it prevents the playbook from completing in 1 clean swoop:

# TASK [spawn-server : Debug server_ipv4] ***************************************************************************************************************************************************************
# ok: [test1.penholder.xyz] => {
#     "msg": "IPv4 for test1.penholder.xyz is fe80::a474:21ff:fe25:ccbc"
# }
# ok: [test2.penholder.xyz] => {
#     "msg": "IPv4 for test2.penholder.xyz is 10.1.130.98"
# }

# If the collected IPv4 is actually an IPv6 address we should exit the playbook!

- name: "Check if the collected IP is actually an IPv6 address"
  fail:
    msg: "The collected IP for {{ inventory_hostname }} is actually an IPv6 address, exiting the playbook!"
  when:
    - spawn_on_proxmox | bool
    - server_ipv4 is not match('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')  # Not a valid IPv4
    - server_ipv4 is match('^[0-9a-fA-F:]+$')  # Simplified pattern to match IPv6

- name: "Debug server_ipv6"
  debug:
    msg: "IPv6 for {{ inventory_hostname }} is {{ server_ipv6 }}"
  when: spawn_on_proxmox | bool
